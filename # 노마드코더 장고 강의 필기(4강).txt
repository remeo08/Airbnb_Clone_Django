# 노마드코더 장고 강의 필기
### 4.0 models

# 앱 폴더 생성
# terminal >
# python manage.py startapp (~폴더명~)
python manage.py startapp houses



# houses > models.py
# Create your models here(model = 어플리케이션에서 데이터의 모양, airbnb-clone에서는 house)
# (house에는 사진, 이름, 주소, 가격, 설명 등의 정보가 있을 것)
# 데이터를 설명하고, 데이터의 타입을 설정

class House(models.Model):   # 모델이니까 models.Model 상속받음

    """Model Definition for Houses"""

    name = models.CharField(max_length=140)    # 데이터 타입: CharField(max_length가 정해진 문자열)
    price = models.PositiveIntegerField()    # PositiveIntegerField(양의 정수)
    description = models.TextField()    # TextField(제한 없는 문자열)
    address = models.CharField(max_length=140)



# config > settings.py > INSTALLED_APPS
# 새로 만든 app(house)을 django에게 알려줘야 함
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'houses.apps.HousesConfig'    # houses 파일 중 apps 파일에 있는 HousesConfig
]



### 4.1 Migrations

# 데이터베이스는 sql 코드와 소통함
# 장고는 우리의 커스텀 데이터에 대한 관리 패널을 자동으로 생성해줌
# houses > admin.py

from .models import House    # models 폴더에서 House 모델을 import

@admin.register(House)   # admin 패널에 'House'라는 모델을 등록하고 싶다
class HouseAdmin(admin.ModelAdmin):    # 이 class가 House model을 통제
    pass    # ModelAdmin을 상속 받았는데 아무것도 수정하지 않았으니 새로 만든 HouseAdmin class는 ModelAdmin과 동일한 class



# 데이터베이스에 House model에 대해 알려줘야 함. 어떤 내용을 수정하더라도 아래 명령어 2개 실행
# 데이터베이스의 형태를 수정해야 함( => migration)
# terminal > 
python manage.py makemigrations    # houses/migrations라는 폴더 생성됨
python manage.py migrate



### 4.2 recap

# config > settings.py > INSTALLED_APPS

CUSTOM_APPS = [
    'houses.apps.HousesConfig'    # houses 파일 중 apps 파일에 있는 HousesConfig
]

SYSTEM_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

]

INSTALLED_APPS = CUSTOM_APPS + SYSTEM_APPS

# 모델의 데이터명 바꾸기
# houses > models.py
class House(models.Model):

    """Model Definition for Houses"""

    name = models.CharField(max_length=140)
    price_per_night = models.PositiveIntegerField()    # Price -> Price_per_night로 이름 수정
    description = models.TextField()
    address = models.CharField(max_length=140)


# terminal >
python manage.py makemigrations
python manage.py migrate
# 결과: houses > migrations > 0002_initial.py 파일 생성 > migrations.RenameField 라는 operations에 old_name/new_name이 있음


# 모델에 데이터 추가
# houses > models.py
class House(models.Model):

    """Model Definition for Houses"""

    name = models.CharField(max_length=140)
    price_per_night = models.PositiveIntegerField()
    description = models.TextField()
    address = models.CharField(max_length=140)
    pets_allowed = models.BooleanField(default=True)


# terminal >
python manage.py makemigrations
python manage.py migrate
# 결과: houses > migrations > 0002_initial.py 파일 생성 > migrations.AddField 라는 operations에 추가한 데이터 있음




### 4.3 admin

# admin에서 houses 추가하면 House object(1)이라는 이름으로 추가됨.
# House 클래스의 객체 이름(string method) 바꾸는 법
# houses > models.py
class House(models.Model):

    """Model Definition for Houses"""

    name = models.CharField(max_length=140)
    price_per_night = models.PositiveIntegerField()
    description = models.TextField()
    address = models.CharField(max_length=140)
    pets_allowed = models.BooleanField(default=True)

    def __str__(self):
        return self.name


# admin 패널에서 column 구현하는 법
# list_display라는 property: admin 패널에 보이고 싶은 column들의 list(from. model)를 쓰는 것.

# houses > admin.py
@admin.register(House)
class HouseAdmin(admin.ModelAdmin):
    list_display = [
        "name",
        "price_per_night",
        "address",
        "pets_allowed"
    ]



# admin 패널에서 필터 구현하는 법
# list_filter: 어떤 column을 기준으로 할지 쓰면 됨.
@admin.register(House)
class HouseAdmin(admin.ModelAdmin):
    list_display = [
        "name",
        "price_per_night",
        "address",
        "pets_allowed"
    ]

    list_filter = [
        "price_per_night",
        "pets_allowed"
    ]


# admin 패널에서 검색어 구현하는 법
# search_fields: 뭘 검색하고 싶은지
admin.register(House)
class HouseAdmin(admin.ModelAdmin):
    list_display = [
        "name",
        "price_per_night",
        "address",
        "pets_allowed"
    ]

    list_filter = [
        "price_per_night",
        "pets_allowed"
    ]
    search_fields = ["address"]    # -> 검색창 생김

# search_fields = ["address_startswith"]    # 해당 텍스트로 시작하는 것만 검색한다.
# contains(~를 포함하는), endswith(~로 끝나는), 대문자인지도 구분할 수 있음



# list보다는 tuple이 사용된다.
admin.register(House)
class HouseAdmin(admin.ModelAdmin):
    list_display = (
        "name",
        "price_per_night",
        "address",
        "pets_allowed"
    )

    list_filter = (
        "price_per_night",
        "pets_allowed"
    )
    search_fields = ("address")    # 한 개의 element를 가진 tuple은 문자열로 취급됨. search_fields가 문자열이면 오류남. 따라서 끝에 콤마(,)를 붙여서 tuple로 변환함.




### 4.4 장고 공식 문서
# model field options(ex. max_length=140/default=True 등)
# houses > models.py

    price_per_night = models.PositiveIntegerField(verbose_name="Price", help_txt="Positive Numbers Only")
    pets_allowed = models.BooleanField(verbose_name="Pets Allowed?", default=True, help_text="Does this house allow pets?")


# help_txt : 부연 설명
# verbose_name : 인간이 읽을 수 있는 이름을 field에 부여.


# admin fields
# houses > admin.py
fields = ("name", "address", ("price_per_night", "pets_allowed"))
# 위와 같이 tuple 속에 tuple 넣으면 admin 패널에서 한 줄에 같이 나옴.
# list_display_links = ("name", "address") 하면 admin 패널에서 name뿐만 아니라 address를 클릭해도 House 접근 가능



